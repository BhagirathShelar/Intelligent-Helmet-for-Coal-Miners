
 
 /* 
 Project Name - Smart Helmet
 Author - Bhagirath Shelar 
 Last updated on -11/05/2021
 Perfectly Run on -   
 */

#include <DHT.h>
#include <MQ135.h>
#include <TinyGPS++.h>

#include <SoftwareSerial.h>
static const int RXPin = 4, TXPin = 3;
static const uint32_t GPSBaud = 9600;
// The TinyGPS++ object
TinyGPSPlus gps;
// The serial connection to the GPS device
SoftwareSerial ss(RXPin, TXPin);

#define PIN_MQ135 A2
#define buzzer 6
#define IRSensor 9
#define LED 10
#define VIB 11
MQ135 mq135_sensor(PIN_MQ135);
DHT dht;

float temperature = 45.0; // Assume current temperature. Recommended to measure with DHT11
float humidity = 60.0; // Assume current humidity. Recommended to measure with DHT11
float rzero = mq135_sensor.getRZero();
float correctedRZero = mq135_sensor.getCorrectedRZero(temperature, humidity);
float resistance = mq135_sensor.getResistance();
float ppm = mq135_sensor.getPPM();
float correctedPPM = mq135_sensor.getCorrectedPPM(temperature, humidity);
int TP = 0, HM = 0, PS = 0; 
float LT,LN,GS=0.0;
String IR;

#define USE_ARDUINO_INTERRUPTS true    // Set-up low-level interrupts for most acurate BPM math.
#include <PulseSensorPlayground.h>     // Includes the PulseSensorPlayground Library.   

//  Variables
const int PulseWire = A1;       // PulseSensor PURPLE WIRE connected to ANALOG PIN 0
const int LED13 = 13;          // The on-board Arduino LED, close to PIN 13.
int Threshold = 550;           // Determine which Signal to "count as a beat" and which to ignore.
                              
                               
PulseSensorPlayground pulseSensor;  // Creates an instance of the PulseSensorPlayground object called "pulseSensor"



void setup() {
  Serial.begin(9600);
  ss.begin(GPSBaud);
  dht.setup(2); // data pin 2
  pinMode(buzzer,OUTPUT);
  pinMode(IRSensor, INPUT); // IR Sensor pin INPUT
  pinMode(LED, OUTPUT); // LED Pin Output
  pinMode(VIB, OUTPUT);
  analogWrite(buzzer,255);
  digitalWrite(LED,HIGH); 
  analogWrite(VIB,0);
  pulseSensor.analogInput(PulseWire);   
//  pulseSensor.blinkOnPulse(LED);       //auto-magically blink Arduino's LED with heartbeat.
  pulseSensor.setThreshold(Threshold);
  if (pulseSensor.begin()) {
    Serial.println("We created a pulseSensor Object !");  //This prints one time at Arduino power-up,  or on Arduino reset.  
  }
//  Serial.println("Welcome");
//  Serial.println("Thanks for using Smart Helmet");
}

void loop(){
  hum_temp();
  delay(5);
  pulse_count();
  delay(5);
  gas_det();
  delay(5);
  motion_det();
  delay(5);
  location_det();
  delay(5);
  xbee_write();
//  Serial.println("----------------------------------------");
  delay(500);
}

void hum_temp(){
  delay(dht.getMinimumSamplingPeriod());

  float humidity = dht.getHumidity();
  float temperature = dht.getTemperature();
  TP = temperature;
  HM = humidity;
  //Serial.println(TP);
 if ( temperature<=45)
 {
  analogWrite(buzzer,255);
  digitalWrite(LED, HIGH); // LED High
  analogWrite(VIB, 0);   
//  Serial.println("TEMPERATURE IS FINE ");
  
  }
  
 else if(temperature>=45)
  {
   for(int i=0;i<255;i+=5){
    analogWrite(buzzer,i);
    analogWrite(VIB,i);
    delay(8);
  }
  delay(50);
  for(int i=255;i>0;i-=5){
    analogWrite(buzzer,i);
    analogWrite(VIB,i);
    delay(8);
  }
  digitalWrite(LED, LOW); // LED High
   Serial.println("TEMPERATURE IS VERY HIGH");
  }
  delay(50);
}

void pulse_count(){
// Serial.println("Reading Pulses");
int myBPM = pulseSensor.getBeatsPerMinute();  // Calls function on our pulseSensor object that returns BPM as an "int".
                                               // "myBPM" hold this BPM value now. 

if (pulseSensor.sawStartOfBeat()) {            // Constantly test to see if "a beat happened". 
 Serial.println("â™¥  A HeartBeat Happened ! "); // If test is "true", print a message "a heartbeat happened".
 Serial.print("BPM: ");                        // Print phrase "BPM: " 
 Serial.println(myBPM);                        // Print the value inside of myBPM. 
}   
PS = myBPM;      // Print the value of myBPM inside PS.
delay(50);
}

void gas_det() {
  float rzero = mq135_sensor.getRZero();
  float correctedRZero = mq135_sensor.getCorrectedRZero(temperature, humidity);
  float resistance = mq135_sensor.getResistance();
  float ppm = mq135_sensor.getPPM();
  float correctedPPM = mq135_sensor.getCorrectedPPM(temperature, humidity);

  if ( ppm<=600)
  {
  analogWrite(buzzer,255);
  digitalWrite(LED, HIGH); // LED High
  analogWrite(VIB, 0);   
  }
  
  else if(ppm>=600)
  {
  digitalWrite(LED, LOW); // LED Low
  for(int i=0;i<255;i+=5){
  analogWrite(buzzer,i);
  analogWrite(VIB,i);
  delay(8);
  }
  delay(50);
  for(int i=255;i>0;i-=5){
  analogWrite(buzzer,i);
  analogWrite(VIB,i);
  delay(8);
  }
  Serial.println("Gas is Detected!");
  }
  GS = ppm;
  delay(50);
}

void motion_det(){
  int sensorStatus = digitalRead(IRSensor); // Set the GPIO as Input
  if (sensorStatus == 0)
  {
    digitalWrite(LED, LOW); // LED Low
    for(int i=0;i<255;i+=5){
    analogWrite(buzzer,i);
    analogWrite(VIB,i);
    delay(8);
  }
  delay(100);
  for(int i=255;i>0;i-=5){
    analogWrite(buzzer,i);
    analogWrite(VIB,i);
    delay(8);
  }
 //   Serial.println("OBSTACLE AHEAD");
    IR = "ON";
  }
  else
  {
    digitalWrite(LED, HIGH); // LED High
    analogWrite(buzzer,255);
    analogWrite(VIB, 0); 
//    Serial.println("NO OBSTACLE FOUND");
    IR = "OFF";   
    delay(100); 
  }
delay(200);
}

void location_det()
{
  //Serial.println("gps data");
  while (ss.available() > 0)
  {
   gps.encode(ss.read());
   if (gps.location.isUpdated())
   {
      LT=gps.location.lat();
      LN=gps.location.lng();
//     Serial.print("Latitude= "); 
//     Serial.print(LT, 6);
//     Serial.print(" Longitude= "); 
//     Serial.println(LN, 6);
   }
 }
}

void xbee_write(){
  Serial.print('<');  //Starting symbol
  Serial.print(TP);
  Serial.print("|");
  Serial.print(HM);
  Serial.print("|");
  Serial.print(PS);
  Serial.print("|");
  Serial.print(GS);
  Serial.print("|");
  Serial.print(LT); 
  Serial.print("|");
  Serial.print(LN);
  Serial.print("|");
  Serial.println(String(IR)); 
  //Serial.println('>');//Ending symbol
}
